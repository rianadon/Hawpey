// This script removes all of the unsupported options below in
// tslint-eslint-rules from pre-tslint.json and creates a file named tslint.json

'use strict';

let errs = `accessor-pairs
array-callback-return
block-scoped-var
complexity
consistent-return
default-case
dot-notation
dot-location
eqeqeq
guard-for-in
id-blacklist
no-alert
no-caller
no-case-declarations
no-div-regex
no-else-return
no-extra-label
no-eq-null
no-extend-native
no-extra-bind
no-fallthrough
no-floating-decimal
no-implicit-coercion
no-implied-eval
no-invalid-this
no-iterator
no-labels
no-lone-blocks
no-loop-func
no-multi-spaces
no-multi-str
no-native-reassign
no-new
no-new-func
no-new-wrappers
no-octal
no-octal-escape
no-param-reassign
no-process-env
no-proto
no-redeclare
no-return-assign
no-script-url
no-self-compare
no-sequences
no-throw-literal
no-unmodified-loop-condition
no-unused-expressions
no-unused-labels
no-useless-call
no-useless-escape
no-void
no-warning-comments
no-with
vars-on-top
wrap-iife
yoda
no-cond-assign
no-dupe-args
no-dupe-keys
no-extra-parens
no-func-assign
no-negated-in-lhs
no-obj-calls
arrow-body-style
arrow-parens
arrow-spacing
comma-dangle
constructor-super
generator-star-spacing
no-class-assign
no-confusing-arrow
no-const-assign
no-dupe-class-members
no-duplicate-imports
no-new-symbol
no-restricted-globals
no-restricted-imports
no-this-before-super
no-var
no-useless-constructor
object-shorthand
prefer-arrow-callback
prefer-const
prefer-spread
prefer-reflect
prefer-rest-params
prefer-template
require-yield
sort-imports
template-curly-spacing
yield-star-spacing
max-depth
max-params
max-statements
no-plusplus
callback-return
handle-callback-err
no-mixed-requires
no-new-require
no-path-concat
no-process-exit
no-restricted-modules
no-sync
brace-style
camelcase
comma-spacing
comma-style
computed-property-spacing
consistent-this
eol-last
func-names
func-style
id-length
jsx-quotes
key-spacing
keyword-spacing
lines-around-comment
linebreak-style
max-len
max-nested-callbacks
new-cap
new-parens
newline-after-var
newline-before-return
newline-per-chained-call
no-array-constructor
no-continue
no-inline-comments
no-lonely-if
no-mixed-spaces-and-tabs
no-multiple-empty-lines
no-nested-ternary
no-new-object
no-spaced-func
no-ternary
no-trailing-spaces
no-underscore-dangle
no-unneeded-ternary
no-whitespace-before-property
object-curly-spacing
one-var
one-var-declaration-per-line
operator-assignment
operator-linebreak
padded-blocks
quote-props
quotes
id-match
semi-spacing
semi
sort-vars
space-before-blocks
space-before-function-paren
space-in-parens
space-infix-ops
space-unary-ops
spaced-comment
wrap-regex
init-declarations
no-catch-shadow
no-delete-var
no-implicit-globals
no-label-var
no-self-assign
no-shadow-restricted-names
no-shadow
no-undef-init
no-undef
no-undefined
no-unused-vars
no-use-before-define`;

errs = errs.split('\n');

const fs = require('fs');
const tslint = JSON.parse(fs.readFileSync('pre-tslint.json'));
for (const rule of errs) {
  delete tslint.rules[rule];
}
fs.writeFileSync('tslint.json', JSON.stringify(tslint, null, 2));
